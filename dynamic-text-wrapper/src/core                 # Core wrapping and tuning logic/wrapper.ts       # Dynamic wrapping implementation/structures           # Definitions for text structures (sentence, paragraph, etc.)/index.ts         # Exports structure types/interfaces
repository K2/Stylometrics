// filepath: /dynamic-text-wrapper/dynamic-text-wrapper/src/core/wrapper.ts
/**
 * Dynamic Text Wrapper Implementation
 * 
 * This module provides functionality for dynamically wrapping text based on non-perceptible white-space.
 * It manages dynamic lengths for end-of-line and word wrapping, allowing for flexible text presentation.
 * 
 * Design Goals:
 * - Implement dynamic wrapping logic that respects non-perceptible white-space.
 * - Provide a mechanism to adjust wrapping behavior based on various text structures.
 * 
 * Architectural Constraints:
 * - The implementation must handle different text structures such as sentences, paragraphs, and chapters.
 * - It should be efficient and maintain performance across large text inputs.
 * 
 * Happy Path:
 * 1. Input text is processed to identify non-perceptible white-space.
 * 2. The text is wrapped according to specified dynamic lengths.
 * 3. The output is returned as a formatted string.
 * 
 * Example:
 * 
 *     const wrappedText = wrapText("This is a sample text that needs to be wrapped.", 20);
 *     console.log(wrappedText);
 * 
 *     // Output:
 *     // This is a sample
 *     // text that needs
 *     // to be wrapped.
 */

type TextStructure = 'sentence' | 'paragraph' | 'section' | 'chapter' | 'volume';

interface WrapOptions {
    maxLineLength: number; // Maximum length of a line before wrapping
    structure: TextStructure; // Type of text structure being wrapped
}

/**
 * Wraps the given text based on the specified options.
 * 
 * @param text - The text to be wrapped.
 * @param options - The wrapping options including max line length and structure type.
 * @returns The wrapped text as a string.
 */
function wrapText(text: string, options: WrapOptions): string {
    const { maxLineLength, structure } = options;
    let wrappedText = '';
    let currentLine = '';

    const words = text.split(' ');

    for (const word of words) {
        // Check if adding the next word exceeds the max line length
        if ((currentLine + word).length > maxLineLength) {
            wrappedText += currentLine.trim() + '\n'; // Add the current line to wrapped text
            currentLine = ''; // Reset current line
        }
        currentLine += word + ' '; // Add the word to the current line
    }

    // Add any remaining text in the current line
    if (currentLine) {
        wrappedText += currentLine.trim();
    }

    return wrappedText;
}

// Exporting the wrapText function for use in other modules
export { wrapText, TextStructure, WrapOptions };