# filepath: /dynamic-text-wrapper/dynamic-text-wrapper/src/core/wrapper.ts
/**
 * Dynamic Text Wrapper Implementation
 * 
 * This module provides functionality for dynamically wrapping text based on non-perceptible white-space.
 * It manages end-of-line and word wrapping with adjustable thresholds for various text structures.
 * 
 * Design Goals:
 * - Implement dynamic text wrapping that respects non-perceptible white-space.
 * - Allow for tuning of wrapping behavior across different text structures.
 * 
 * Architectural Constraints:
 * - The implementation must handle various text structures such as word pairs, sentence fragments, sentences,
 *   paragraphs, sections, chapters, and volumes.
 * 
 * Happy Path:
 * 1. Input text is processed to identify non-perceptible white-space.
 * 2. The text is wrapped according to the specified thresholds.
 * 3. The output is returned as a properly formatted string.
 * 
 * Example:
 * 
 *   const wrappedText = wrapText("This is an example of dynamic text wrapping.", {
 *       threshold: 10,
 *       structure: "sentence"
 *   });
 * 
 *   console.log(wrappedText);
 */

interface WrapOptions {
    threshold: number; // The maximum length before wrapping occurs
    structure: 'wordPair' | 'sentenceFragment' | 'sentence' | 'paragraph' | 'section' | 'chapter' | 'volume';
}

/**
 * Wraps the given text based on the specified options.
 * 
 * @param text - The text to be wrapped.
 * @param options - The wrapping options including threshold and structure type.
 * @returns The wrapped text.
 */
function wrapText(text: string, options: WrapOptions): string {
    // Validate input
    assert(text !== null && text.length > 0, 'Text must be a non-empty string');
    assert(options.threshold > 0, 'Threshold must be a positive number');

    const { threshold, structure } = options;
    let wrappedText = '';
    let currentLine = '';

    // Split text into words
    const words = text.split(' ');

    for (const word of words) {
        // Check if adding the next word exceeds the threshold
        if ((currentLine + word).length > threshold) {
            wrappedText += currentLine.trim() + '\n'; // Add the current line to wrapped text
            currentLine = word + ' '; // Start a new line with the current word
        } else {
            currentLine += word + ' '; // Add the word to the current line
        }
    }

    // Add any remaining text
    wrappedText += currentLine.trim();

    return wrappedText;
}

// Example usage
const exampleText = "This is an example of dynamic text wrapping.";
const wrapped = wrapText(exampleText, { threshold: 10, structure: 'sentence' });
console.log(wrapped); // Output the wrapped text

// Inline assertions for design assumptions
function assert(condition: boolean, message: string): void {
    if (!condition) {
        throw new Error(message);
    }
}