/**
 * @module src/types/EncodingMetadata
 * @description Defines interfaces for metadata required to decode payloads encoded by the CarrierMatrix.
 * This metadata maps erasure-coded chunks to their physical locations within document segments and carriers.
 */

/**
 * Details the location and portion of a single erasure-coded chunk.
 * Multiple ChunkLocation entries might exist for a single chunk if it's split across carriers/segments.
 */
export interface ChunkLocation {
    /** Index of the erasure-coded chunk (0 to totalChunks - 1). */
    chunkIndex: number;
    /** Identifier of the document segment where this part is encoded. */
    segmentId: string;
    /** Key identifying the carrier used for encoding this part. */
    carrierKey: string;
    /** Starting bit position of this part within the original chunk's binary data. */
    bitOffset: number;
    /** Number of bits belonging to this chunk part encoded at this location. */
    bitLength: number;
}

/**
 * Metadata generated during encoding, essential for decoding the payload.
 * It contains the total number of erasure-coded chunks and a map detailing
 * where each part of each chunk is located.
 */
export interface EncodingMetadata {
    /** Total number of data and parity chunks generated by erasure coding. */
    totalChunks: number;
    /** A map detailing the location of every encoded part of every chunk. */
    chunkMap: ChunkLocation[];
    /** Optional: Original payload length before erasure coding (useful for decoding). */
    originalPayloadLength?: number;
    /** Optional: Hash of the original payload for integrity checks. */
    payloadHash?: string;
}

/**
 * Result structure returned by CarrierMatrix.encodePayload.
 */
export interface EncodePayloadResult {
    /** Map where keys are segment IDs and values are the modified content of those segments. */
    encodedSegments: Map<string, string>;
    /** Metadata required for decoding. */
    metadata: EncodingMetadata;
}
